<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright ? 2018  深圳市电子商务安全证书管理有限公司(SZCA,深圳CA) 版权所有
  ~ Copyright ? 2018  SZCA. All Rights Reserved.
  ~ <p>
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~ <p>
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~ <p>
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
	xsi:schemaLocation="  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd  
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	default-lazy-init="false">
	<!--
	由于在org.bcia.javachain.ca.szca.publicweb.InitGlobalConfig中使用了 @PostConstruct做系统初始化，default-lazy-init="false" .
	若default-lazy-init="true"申明了延迟初始化,意味着容器刚启动,如果这个bean没有被调用,是不会初始化。
 -->
	<description>Spring公共配置 </description>
	<bean id="dataSource"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<!-- <property name="jndiName" value="java:comp/env/jdbc/mysql-sshds" /> -->
		<!-- for JBOSS and Wildfly <property name="jndiName" value="java:/EjbcaDS" 
			/> -->
		<!-- for Tomcat -->
		<property name="jndiName" value="java:comp/env/jdbc/BciaDS"/>

	</bean>
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan
		base-package="org.bcia.javachain" />

	<!-- **************************************************************************************************************** -->
	<!-- ***************方法2===JPA=START*************** -->
	<!-- ****************************************************************************************************************** -->

	<!-- JPA实体管理工厂的配置=====当xxxDao中使用@PersistenceContext private EntityManager 
		entityManager 导入依赖时需要使用===如本项目中的com.szca.hello.jpa包中的例子=== -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter"
			ref="hibernateJpaVendorAdapter" />
		<!-- <property name="jpaDialect" value="org.hibernate.dialect.MySQL5Dialect" 
			/> -->
		<!--待扫描的实体类包，不再需要persistence.xml了 -->
		<property name="packagesToScan"
			value="org.bcia.javachain.ca.szca,com.szca.hello,org.cesecore,org.ejbca" />
		<property name="mappingResources">
			<array>
				<value>bcia-szca-mysql.hbm.xml</value>
			</array>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.show_sql">true</prop>
				<!-- 在resources/import.sql中有系统初始化数据的脚本 hibernate.hbm2ddl.auto 设置为create时每次启动Hibernate都会先删除所有表，再创建表，然后再执行import.sql中的脚本 ，而hibernate.hbm2ddl.auto 设置为update时，则不会执行此脚本 -->
				<!-- <prop key="hibernate.hbm2ddl.auto">create</prop>   -->
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop>   -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	<!--指定实现JPA的适配器 -->

	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform"
			value="org.hibernate.dialect.MySQL57Dialect" />
		<!-- <property name="databasePlatform" value="org.hibernate.dialect.MySQL5Dialect" 
			/> -->
	</bean>

	<!-- Jpa 事务配置 -->
	<!--===Jpa事务管理器的名称，若此事务管理器不是默认的事务管理器，则需要在代码中指定==如UserServiceImpl中的@Transactional(transactionManager="jpaTransactionManager")，否则系统会commit失败（但也不会抛出异常）== -->

	<bean id="jpaTransactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory"
			ref="entityManagerFactory" />
	</bean>

	<!-- Spring Data Jpa配置 -->
	<!-- <jpa:repositories base-package="cn.ibeans" transaction-manager-ref="transactionManager" 
		entity-manager-factory-ref="entityManagerFactory"/> -->

	<!-- ********************************************************************************************************************************** -->
	<!-- ***************方法2===JPA=END*************** -->
	<!-- ********************************************************************************************************************************** -->

	<!-- =====******方法3===JDBC=START******=====start of transaction-manager 
		FOR JDBC====JDBC事务管理器========== -->
	<bean id="jdbcTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- =====******方法3===JDBC=END******=====start of transaction-manager FOR 
		JDBC====JDBC事务管理器========== -->


	<!-- 使用annotation定义默认的事务管理器==在代码的@Transactional中，若无指定参数transactionManager的值，即使用此事务管理器。==若不配置默认事务管理器，正直需要commit时会抛出异常= -->
	<!-- -->
	<tx:annotation-driven
		transaction-manager="jpaTransactionManager" proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->

	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />


	<!-- 存储区域设置信息 SessionLocaleResolver类通过一个预定义会话名将区域化信息存储在会话中。 -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />

	<!-- 国际化资源文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
		<!-- 如果在国际化资源文件中找不到对应代码的信息，就用这个代码作为名称 -->
		<property name="useCodeAsDefaultMessage" value="true" />
	</bean>



	<!-- start of interceptors -->
	<!-- 在UserLoginInterceptor中使用注入的注释来控制权限，使用DefaultAnnotationHandlerMapping只能返回Controller对象，不会映射到Controller中的方法级别，无法得到在Controller方法上通过AuthPassport注入的权限。 
		必须使用RequestMappingHandlerMapping -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"> -->

	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
		<property name="interceptors">
			<list>
				<!-- 顺序是先检查登录，再检查权限，不能乱 -->	<!-- <bean class="cn.szca.wfs.interceptor.UserLoginInterceptor" /> <bean 
					class="cn.szca.wfs.interceptor.RightCodeInterceptor" /> -->
				<bean class="com.szca.common.interceptor.LanguageInterceptor" />

			</list>
		</property>
	</bean>
	<!-- org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter要与 
		org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping匹配，同时配置才能正常使用 -->
	<!-- -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" />
	<!-- end of interceptors -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>


	<!-- 上传文件 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 最大文件大小 20M -->
		<property name="maxUploadSize" value="20480000" />
		<!-- <property name="maxInMemorySize" value="4096" /> -->
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

</beans>  